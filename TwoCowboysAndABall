
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This example demonstrates a scene with a full-screen
; playfield, and two sprites overlapping it. This takes more
; CPU time, so our kernel operates in 4-line chunks.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        seg.u Variables
	org $80

Counter	byte	; Counter for each frame

YPosP0	byte	; Y position of player 0 sprite
YPosP1	byte	; Y position of player 1 sprite

YPosBl	byte
YVelBl	byte	
XVelBl	byte
XBlErr	byte

; temporary values for kernel
YP0	byte	; Y counter for player 0
YP1	byte	; Y counter for player 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Enable ball if it is on this scanline (in X register)
; Modifies A.
	MAC DRAW_BALL
	lda #%00000000
        ldx Counter
	cpx YPosBl
        bne .noball
        lda #%00000010	; for ENAM0 the 2nd bit is enable
.noball
	sta ENABL	; enable ball
        ENDM

SpriteHeight	equ 16

BGCOLOR		equ $30
PLCOLOR		equ $6c
GNDCOLOR	equ $c0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        seg Code
	org $f000

Start
	CLEAN_START
 
Data0        
; set up pointers to playfield and sprites
        lda ColorFrame0	;enable sprites
        sta COLUP0
        sta COLUP1
        
        lda #BGCOLOR	; set the background color
        sta COLUBK	
        lda #PLCOLOR	; set the playfield color
        sta COLUPF
        lda #%00010001	; playfield reflection and ball size/priority
        sta CTRLPF
        lda #0		; blank out the playfield
        sta PF0
        sta PF1
        sta PF2
        
; set up initial positions
        lda #255	; set up p0 and m0 y positions
        sta YPosP0
        lda #80		
        sta YPosP1	
        
        ; Set ball initial velocity
        lda #100
        sta YPosBl
	lda #$01
        sta YVelBl
        lda #$30
        sta XVelBl
        
        sta RESBL

NextFrame
	VERTICAL_SYNC

	TIMER_SETUP 37
; Set temporary Y counter and set horizontal position
        lda YPosP0
        sta YP0		; yp0 = temporary counter
        lda YPosP1
        sta YP1		; yp0 = temporary counter
        
        lda #%00010101	; playfield reflection and ball size/priority
        sta CTRLPF

        sta WSYNC
        sta HMOVE	; gotta apply HMOVE

	lda #0
        sta Counter
        
	TIMER_WAIT
        lda #0
        sta VBLANK
        SLEEP 31

;KernelLoop

scanloop1
; Draw p0 sprite, and check for hit
        sec
        isb YP1			; INC yp0, then SBC yp0
        jsr DrawSprite0
	inc Counter	; no more playfield?
        ldy Counter
        cpy #17		; 17 frames for first sprite to account for overlap on first line
	bne scanloop1

scanloop2
        sec
        isb YP1			; INC yp0, then SBC yp0
        sta WSYNC
        DRAW_BALL
	inc Counter
        ldy Counter
        cpy #175
        bne scanloop2

scanloop3
; Draw p1 sprite, and check for hit
	jsr DrawSprite1
        DRAW_BALL
        inc Counter
        ldy Counter
        cpy #192
        bne scanloop3

NoMoreLines

; Disable ball
	;lda #0
        ;sta ENABL

; 29 lines of overscan needed, but we have lots of logic to do.
; So we're going to use the PIA timer to let us know when
; almost 29 lines of overscan have passed.
; This handy macro does a WSYNC and then sets up the timer.
	TIMER_SETUP 29
        
; Check for loss
	ldx #1
        ldy YPosBl
	lda #$00
        clc
        adc #05
        sec
        sbc YPosBl
        beq Loss
        bne CheckP1Loss	; bottom half ok
CheckP1Loss
	ldx #1
        ldy YPosBl
	lda #$FF
        clc
        sbc #$40
        sec
        sbc YPosBl
        beq Loss	; bottom half, not ok
        bne Continue
Loss
	jmp Start
Continue

; Check for collisions
        lda #%01000000
	bit CXP0FB	; collision between player 0 and ball?
        bne Player0Collision
        lda #%10000000
        bit CXP1FB
        bne Player1Collision
        beq NoCollision
        
Player0Collision
; See if we bounce off of top half or bottom half  of player
; (yplyr + height/2 - yball)
	ldx #1
	lda YPosP0
        clc
        adc #SpriteHeight/2
        sec
        sbc YPosBl
        bmi StoreVel	; bottom half, bounce down
	ldx #$ff	; top half, bounce up
        bne StoreVel
        
Player1Collision
; See if we bounce off of top half or bottom half  of player
; (yplyr + height/2 - yball)
	ldx #1
	lda YPosP0
        clc
        adc #SpriteHeight/2
        sec
        sbc YPosBl
        bmi StoreVel	; bottom half, bounce down
	ldx #$ff	; top half, bounce up
        bne StoreVel
        
StoreVel
; Store final velocity
        stx YVelBl
        
NoCollision
; Clear collision registers for next frame
	sta CXCLR
; Move ball vertically
	lda YPosBl
        clc
        adc YVelBl
        sta YPosBl
; Move ball horizontally
; We use an fractional counter for the ball, and we have to
; set a different HMOVE value depending on if it's left or right
        lda XVelBl
        bmi ballMoveLeft
        clc
        adc XBlErr
        sta XBlErr
        bcc ballCaptured
        lda #$f0
        sta HMBL
        bne ballCaptured
ballMoveLeft
	sec
        sbc XBlErr
        sta XBlErr
        bcs ballCaptured
        lda #$10
        sta HMBL
ballCaptured
        sta WSYNC
        sta HMOVE	; apply the move(s)
        sta HMCLR

        jsr MoveJoystick0
        jsr MoveJoystick1
        TIMER_WAIT
        
        jmp NextFrame

; DrawSprite subroutine called by kernel
DrawSprite0
; Fetch sprite 0 values
        lda #SpriteHeight	; height in 2xlines
        sec
        isb YP0			; INC yp0, then SBC yp0
        bcs DoDrawP0		; inside bounds?
        lda #0			; no, load the padding offset (0)
DoDrawP0
        tay			; -> Y
        lda ColorFrame0,y	; color for both lines
	tax
	lda Frame0,y		; bitmap for first line
        
        sta WSYNC
        sta GRP0
        stx COLUP0
        rts

DrawSprite1
; Fetch sprite 1 values
        lda #SpriteHeight	; height in 2xlines
        sec
        isb YP1			; INC yp0, then SBC yp0
        bcs DoDrawP1		; inside bounds?
        lda #0			; no, load the padding offset (0)
DoDrawP1
        tay			; -> Y
        lda ColorFrame0,y	; color for both lines
	tax
	lda Frame0,y		; bitmap for first line
        
        sta WSYNC
        sta GRP1
        stx COLUP1
        rts

; Read joystick movement and apply to object 0
MoveJoystick0
; Move horizontally
        ldx #0
	lda #%01000000	;Left?
	bit SWCHA
	bne SkipMoveLeft0
	ldx #$10
SkipMoveLeft0
	lda #%10000000	;Right?
	bit SWCHA 
	bne SkipMoveRight0
        ldx #$F0
SkipMoveRight0
	stx HMP0
	rts

MoveJoystick1
; Move horizontally
        ldx #0
	lda #%00000100	;Left?
	bit SWCHA
	bne SkipMoveLeft1
	ldx #$10
SkipMoveLeft1
	lda #%00001000	;Right?
	bit SWCHA 
	bne SkipMoveRight1
        ldx #$F0
SkipMoveRight1
	stx HMP1
	rts

; Bitmap data "standing" position
Frame0
	.byte #0
        .byte #%01101100;$F6
        .byte #%00101000;$86
        .byte #%00101000;$86
        .byte #%00111000;$86
        .byte #%10111010;$C2
        .byte #%10111010;$C2
        .byte #%01111100;$C2
        .byte #%00111000;$C2
        .byte #%00111000;$16
        .byte #%01000100;$16
        .byte #%01111100;$16
        .byte #%01111100;$18
        .byte #%01010100;$18
        .byte #%01111100;$18
        .byte #%11111110;$F2
        .byte #%00111000;$F4

; Color data for each line of sprite
ColorFrame0
	.byte #$FF;
	.byte #$F6;
	.byte #$86;
	.byte #$86;
	.byte #$86;
	.byte #$C2;
	.byte #$C2;
	.byte #$C2;
	.byte #$C2;
	.byte #$16;
	.byte #$16;
	.byte #$16;
	.byte #$18;
	.byte #$18;
	.byte #$18;
	.byte #$F2;
	.byte #$F4;

; Epilogue
	org $fffc
        .word Start
        .word Start
